stages:
  - docker
  - deploy

workflow:
  rules:
    - when: always

docker-package:
  stage: docker
  image: docker:stable-dind
  services:
    - name: docker:stable-dind
      alias: docker
  needs:
    - job: build-gradle
      pipeline: $PARENT_PIPELINE_ID
      artifacts: true
  variables:
    DOCKER_BUILDKIT: 1
  script:
    - ls -halt
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker build --tag "${CI_REGISTRY_IMAGE}" .
    - docker push $CI_REGISTRY_IMAGE

deploy-develop:
  stage: deploy
  image:
    name: bitnami/kubectl
    entrypoint: [""]
  environment:
    name: develop
    url: https://pumps-server-develop.codeforleipzig.de
    kubernetes:
      namespace: leipzig-pumps
  needs:
    - job: docker-package
      artifacts: false
  variables:
    NAMESPACE_SLUG: leipzig-pumps
  script:
    - kubectl config get-contexts
    - kubectl config use-context leipzig-pumps/pumps-server:pumps-server-develop
    - kubectl get namespaces
    - kubectl get pods -n gitlab-kubernetes-agent
    - kubectl create namespace $NAMESPACE_SLUG --dry-run=client -o yaml | kubectl apply -f -
    - kubectl delete secret gitlab-registry --namespace $NAMESPACE_SLUG --ignore-not-found
    - echo CI_REGISTRY $CI_REGISTRY
    - echo CI_DEPLOY_USER $CI_DEPLOY_USER
    - echo CI_DEPLOY_PASSWORD $CI_DEPLOY_PASSWORD
    - echo GITLAB_USER_EMAIL $GITLAB_USER_EMAIL
    - kubectl create secret docker-registry gitlab-registry --docker-server="$CI_REGISTRY" --docker-username="$CI_DEPLOY_USER" --docker-password="$CI_DEPLOY_PASSWORD" --docker-email="$GITLAB_USER_EMAIL" --namespace="$NAMESPACE_SLUG" -o yaml --dry-run=client | kubectl apply -f -
    - kubectl get secrets --namespace $NAMESPACE_SLUG
    - kubectl apply -f kubernetes/deployment-snapshot.yaml